package ArraysNMaths;

import java.util.ArrayList;
import java.util.List;

public class MajorityElementNBy3 {
    public static void main(String[] args) {
        MajorityElementNBy3 majorityElementNBy3 = new MajorityElementNBy3();
        int[] A = {1000802, 1000135, 1000005, 1000723, 1000491, 1000802, 1000802, 1000802, 1000802, 1000786, 1000306, 1000802, 1000802, 1000802, 1000639, 1000683, 1000880, 1000329, 1000408, 1000822, 1000947, 1000802, 1000455, 1000037, 1000311, 1000802, 1000802, 1000339, 1000802, 1000519, 1000401, 1000802, 1000256, 1000802, 1000802, 1000503, 1000802, 1000787, 1000802, 1000802, 1000384, 1000456, 1000845, 1000802, 1000802, 1000000, 1000213, 1000629, 1000802, 1000226, 1000802, 1000802, 1000107, 1000100, 1000802, 1000587, 1000882, 1000049, 1000623, 1000802, 1000178, 1000788, 1000648, 1000802, 1000567, 1000802, 1000802, 1000802, 1000085, 1000109, 1000965, 1000353, 1000802, 1000802, 1000802, 1000982, 1000663, 1000829, 1000578, 1000753, 1000802, 1000802, 1000529, 1000060, 1000047, 1000802, 1000750, 1000780, 1000277, 1000802, 1000751, 1000590, 1000802, 1000953, 1000240, 1000218, 1000659, 1000802, 1000001, 1000766, 1000802, 1000508, 1000802, 1000802, 1000802, 1000028, 1000802, 1000493, 1000077, 1000427, 1000505, 1000752, 1000802, 1000747, 1000126, 1000269, 1000297, 1000394, 1000257, 1000708, 1000802, 1000802, 1000697, 1000802, 1000802, 1000802, 1000921, 1000559, 1000450, 1000206, 1000802, 1000802, 1000149, 1000031, 1000866, 1000721, 1000497, 1000654, 1000057, 1000802, 1000130, 1000523, 1000577, 1000750, 1000536, 1000339, 1000796, 1000802, 1000802, 1000197, 1000584, 1000939, 1000802, 1000633, 1000553, 1000124, 1000086, 1000619, 1000802, 1000415, 1000802, 1000125, 1000802, 1000104, 1000348, 1000464, 1000187, 1000887, 1000369, 1000281, 1000802, 1000802, 1000526, 1000685, 1000029, 1000922, 1000191, 1000802, 1000802, 1000802, 1000298, 1000802, 1000176, 1000295, 1000802, 1000802, 1000238, 1000802, 1000802, 1000314, 1000303, 1000802, 1000698, 1000309, 1000677, 1000606, 1000802, 1000701, 1000898, 1000579, 1000990, 1000513, 1000435, 1000192, 1000960, 1000324, 1000509, 1000906, 1000802, 1000492, 1000705, 1000641, 1000479, 1000662, 1000642, 1000791, 1000942, 1000802, 1000802, 1000100, 1000296, 1000802, 1000802, 1000533, 1000802, 1000038, 1000802, 1000254, 1000802, 1000802, 1000802, 1000802, 1000393, 1000802, 1000435, 1000484, 1000802, 1000847, 1000802, 1000360, 1000961, 1000544, 1000914, 1000802, 1000802, 1000663, 1000802, 1000802, 1000519, 1000802, 1000928, 1000802, 1000802, 1000802, 1000802, 1000258, 1000108, 1000544, 1000802, 1000169, 1000097, 1000802, 1000306, 1000977, 1000802, 1000153, 1000802, 1000802, 1000039, 1000099, 1000802, 1000468, 1000862, 1000802, 1000802, 1000802, 1000068, 1000802, 1000161, 1000179, 1000710, 1000802, 1000802, 1000802, 1000802, 1000540, 1000802, 1000115, 1000802, 1000802, 1000089, 1000802, 1000798, 1000802, 1000802, 1000544, 1000979, 1000850, 1000085, 1000197, 1000802, 1000802, 1000031, 1000704, 1000515, 1000802, 1000198, 1000382, 1000597, 1000613, 1000857, 1000798, 1000319, 1000266, 1000154, 1000753, 1000017, 1000004, 1000802};
        List<Integer> aList = new ArrayList<>();
        for (int X : A) {
            aList.add(X);
        }
        int result = majorityElementNBy3.repeatedNumberI(aList);
        System.out.println(result);
    }

    // O(N^2) solution
    public int solve(int[] A) {
        int N = A.length;
        for (int i = 0; i < N; i++) {
            int currentValue = A[i];
            int frequency = 0;
            for (int j = 0; j < N; j++) {
                if (currentValue == A[j]) {
                    frequency++;
                }
            }
            if (frequency > (N / 3)) {
                return currentValue;
            }
        }
        return -1;
    }

    // O(N^2) list
    public int repeatedNumber(final List<Integer> A) {
        int N = A.size();
        for (int i = 0; i < N; i++) {
            int currentValue = A.get(i);
            int frequency = 0;
            for (int j = 0; j < N; j++) {
                if (currentValue == A.get(j)) {
                    frequency++;
                }
            }
            if (frequency > (N / 3)) {
                return currentValue;
            }
        }
        return -1;
    }

    // Boyre moore majority vote algorithm (O(N))
    public int repeatedNumberI(final List<Integer> a) {
        int N = a.size();
        int ele1 = 0;
        int fre1 = 0;
        int ele2 = 0;
        int fre2 = 0;
        for (int i = 0; i < N; i++) {

            // if the element is already existing, then increase the frequency
            if (ele1 == a.get(i) || ele2 == a.get(i)) {
                if (ele1 == a.get(i)) {
                    fre1++;
                } else {
                    fre2++;
                }
            }

            // if the element is not present, add the element and increment the frequency
            else if (fre1 == 0 || fre2 == 0) {
                if (fre1 == 0) {
                    ele1 = a.get(i);
                    fre1++;
                } else {
                    ele2 = a.get(i);
                    fre2++;
                }
            } else {
                fre1--;
                fre2--;
            }
        }
        //System.out.println(ele1 + " " + ele2);
        int ele1Count = 0;
        int ele2Count = 0;
        for (int i = 0; i < N; i++) {
            if (a.get(i) == ele1) {
                ele1Count++;
            }
            if (a.get(i) == ele2) {
                ele2Count++;
            }
        }
        //System.out.println(ele1Count + " " + ele2Count);

        if (ele1Count > (N / 3)) {
            return ele1;
        }
        if (ele2Count > (N / 3)) {
            return ele2;
        }
        return -1;
    }
}
